{"ast":null,"code":"import _classCallCheck from \"/Users/nakaokashinzo/Documents/react/notion-clone/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/nakaokashinzo/Documents/react/notion-clone/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/nakaokashinzo/Documents/react/notion-clone/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/nakaokashinzo/Documents/react/notion-clone/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/nakaokashinzo/Documents/react/notion-clone/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _jsxFileName = \"/Users/nakaokashinzo/Documents/react/notion-clone/src/editableBlock.js\";\nimport React from \"react\";\nimport ContentEditable from \"react-contenteditable\";\nimport \"./styles.css\";\nimport SelectMenu from \"./selectMenu\";\nimport { getCaretCoordinates, setCaretToEnd } from \"./utils/caretHelpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar CMD_KEY = \"/\";\nvar EditableBlock = /*#__PURE__*/function (_React$Component) {\n  _inherits(EditableBlock, _React$Component);\n  var _super = _createSuper(EditableBlock);\n  function EditableBlock(props) {\n    var _this;\n    _classCallCheck(this, EditableBlock);\n    _this = _super.call(this, props);\n    _this.onChangeHandler = _this.onChangeHandler.bind(_assertThisInitialized(_this));\n    _this.onKeyDownHandler = _this.onKeyDownHandler.bind(_assertThisInitialized(_this));\n    _this.onKeyUpHandler = _this.onKeyUpHandler.bind(_assertThisInitialized(_this));\n    _this.openSelectMenuHandler = _this.openSelectMenuHandler.bind(_assertThisInitialized(_this));\n    _this.closeSelectMenuHandler = _this.closeSelectMenuHandler.bind(_assertThisInitialized(_this));\n    _this.tagSelectionHandler = _this.tagSelectionHandler.bind(_assertThisInitialized(_this));\n    _this.contentEditable = /*#__PURE__*/React.createRef();\n    _this.state = {\n      htmlBackup: null,\n      // needed to store the html temporarely\n      html: \"\",\n      tag: \"p\",\n      previousKey: \"\",\n      selectMenuIsOpen: false,\n      selectMenuPosition: {\n        x: null,\n        y: null\n      }\n    };\n    return _this;\n  }\n  _createClass(EditableBlock, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        html: this.props.html,\n        tag: this.props.tag\n      });\n    }\n\n    // Update the page component if one of the following is true:\n    // 1. user has changed the html content\n    // 2. user has changed the tag\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var htmlChanged = prevState.html !== this.state.html;\n      var tagChanged = prevState.tag !== this.state.tag;\n      if (htmlChanged || tagChanged) {\n        this.props.updatePage({\n          id: this.props.id,\n          html: this.state.html,\n          tag: this.state.tag\n        });\n      }\n    }\n  }, {\n    key: \"onChangeHandler\",\n    value: function onChangeHandler(e) {\n      this.setState({\n        html: e.target.value\n      });\n    }\n  }, {\n    key: \"onKeyDownHandler\",\n    value: function onKeyDownHandler(e) {\n      if (e.key === CMD_KEY) {\n        // If the user starts to enter a command, we store a backup copy of\n        // the html. We need this to restore a clean version of the content\n        // after the content type selection was finished.\n        this.setState({\n          htmlBackup: this.state.html\n        });\n      }\n      if (e.key === \"Enter\") {\n        // While pressing \"Enter\" should add a new block to the page, we\n        // still want to allow line breaks by pressing \"Shift-Enter\"\n        if (this.state.previousKey !== \"Shift\" && !this.state.selectMenuIsOpen) {\n          e.preventDefault();\n          this.props.addBlock({\n            id: this.props.id,\n            ref: this.contentEditable.current\n          });\n        }\n      }\n      if (e.key === \"Backspace\" && !this.state.html) {\n        // If there is no content, we delete the block by pressing \"Backspace\",\n        // just as we would remove a line in a regular text container\n        e.preventDefault();\n        this.props.deleteBlock({\n          id: this.props.id,\n          ref: this.contentEditable.current\n        });\n      }\n      // Store the key to detect combinations like \"Shift-Enter\" later on\n      this.setState({\n        previousKey: e.key\n      });\n    }\n\n    // The openSelectMenuHandler function needs to be invoked on key up. Otherwise\n    // the calculation of the caret coordinates does not work properly.\n  }, {\n    key: \"onKeyUpHandler\",\n    value: function onKeyUpHandler(e) {\n      if (e.key === CMD_KEY) {\n        this.openSelectMenuHandler();\n      }\n    }\n\n    // After openening the select menu, we attach a click listener to the dom that\n    // closes the menu after the next click - regardless of outside or inside menu.\n  }, {\n    key: \"openSelectMenuHandler\",\n    value: function openSelectMenuHandler() {\n      var _getCaretCoordinates = getCaretCoordinates(),\n        x = _getCaretCoordinates.x,\n        y = _getCaretCoordinates.y;\n      this.setState({\n        selectMenuIsOpen: true,\n        selectMenuPosition: {\n          x: x,\n          y: y\n        }\n      });\n      document.addEventListener(\"click\", this.closeSelectMenuHandler);\n    }\n  }, {\n    key: \"closeSelectMenuHandler\",\n    value: function closeSelectMenuHandler() {\n      this.setState({\n        htmlBackup: null,\n        selectMenuIsOpen: false,\n        selectMenuPosition: {\n          x: null,\n          y: null\n        }\n      });\n      document.removeEventListener(\"click\", this.closeSelectMenuHandler);\n    }\n\n    // Restore the clean html (without the command), focus the editable\n    // with the caret being set to the end, close the select menu\n  }, {\n    key: \"tagSelectionHandler\",\n    value: function tagSelectionHandler(tag) {\n      var _this2 = this;\n      this.setState({\n        tag: tag,\n        html: this.state.htmlBackup\n      }, function () {\n        setCaretToEnd(_this2.contentEditable.current);\n        _this2.closeSelectMenuHandler();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [this.state.selectMenuIsOpen && /*#__PURE__*/_jsxDEV(SelectMenu, {\n          position: this.state.selectMenuPosition,\n          onSelect: this.tagSelectionHandler,\n          close: this.closeSelectMenuHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ContentEditable, {\n          className: \"Block\",\n          innerRef: this.contentEditable,\n          html: this.state.html,\n          tagName: this.state.tag,\n          onChange: this.onChangeHandler,\n          onKeyDown: this.onKeyDownHandler,\n          onKeyUp: this.onKeyUpHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true);\n    }\n  }]);\n  return EditableBlock;\n}(React.Component);\nexport default EditableBlock;","map":{"version":3,"names":["React","ContentEditable","SelectMenu","getCaretCoordinates","setCaretToEnd","jsxDEV","_jsxDEV","Fragment","_Fragment","CMD_KEY","EditableBlock","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","onChangeHandler","bind","_assertThisInitialized","onKeyDownHandler","onKeyUpHandler","openSelectMenuHandler","closeSelectMenuHandler","tagSelectionHandler","contentEditable","createRef","state","htmlBackup","html","tag","previousKey","selectMenuIsOpen","selectMenuPosition","x","y","_createClass","key","value","componentDidMount","setState","componentDidUpdate","prevProps","prevState","htmlChanged","tagChanged","updatePage","id","e","target","preventDefault","addBlock","ref","current","deleteBlock","_getCaretCoordinates","document","addEventListener","removeEventListener","_this2","render","children","position","onSelect","close","fileName","_jsxFileName","lineNumber","columnNumber","className","innerRef","tagName","onChange","onKeyDown","onKeyUp","Component"],"sources":["/Users/nakaokashinzo/Documents/react/notion-clone/src/editableBlock.js"],"sourcesContent":["import React from \"react\";\nimport ContentEditable from \"react-contenteditable\";\n\nimport \"./styles.css\";\nimport SelectMenu from \"./selectMenu\";\n\nimport { getCaretCoordinates, setCaretToEnd } from \"./utils/caretHelpers\";\n\nconst CMD_KEY = \"/\";\n\nclass EditableBlock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onChangeHandler = this.onChangeHandler.bind(this);\n    this.onKeyDownHandler = this.onKeyDownHandler.bind(this);\n    this.onKeyUpHandler = this.onKeyUpHandler.bind(this);\n    this.openSelectMenuHandler = this.openSelectMenuHandler.bind(this);\n    this.closeSelectMenuHandler = this.closeSelectMenuHandler.bind(this);\n    this.tagSelectionHandler = this.tagSelectionHandler.bind(this);\n    this.contentEditable = React.createRef();\n    this.state = {\n      htmlBackup: null, // needed to store the html temporarely\n      html: \"\",\n      tag: \"p\",\n      previousKey: \"\",\n      selectMenuIsOpen: false,\n      selectMenuPosition: {\n        x: null,\n        y: null\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ html: this.props.html, tag: this.props.tag });\n  }\n\n  // Update the page component if one of the following is true:\n  // 1. user has changed the html content\n  // 2. user has changed the tag\n  componentDidUpdate(prevProps, prevState) {\n    const htmlChanged = prevState.html !== this.state.html;\n    const tagChanged = prevState.tag !== this.state.tag;\n    if (htmlChanged || tagChanged) {\n      this.props.updatePage({\n        id: this.props.id,\n        html: this.state.html,\n        tag: this.state.tag\n      });\n    }\n  }\n\n  onChangeHandler(e) {\n    this.setState({ html: e.target.value });\n  }\n\n  onKeyDownHandler(e) {\n    if (e.key === CMD_KEY) {\n      // If the user starts to enter a command, we store a backup copy of\n      // the html. We need this to restore a clean version of the content\n      // after the content type selection was finished.\n      this.setState({ htmlBackup: this.state.html });\n    }\n    if (e.key === \"Enter\") {\n      // While pressing \"Enter\" should add a new block to the page, we\n      // still want to allow line breaks by pressing \"Shift-Enter\"\n      if (this.state.previousKey !== \"Shift\" && !this.state.selectMenuIsOpen) {\n        e.preventDefault();\n        this.props.addBlock({\n          id: this.props.id,\n          ref: this.contentEditable.current\n        });\n      }\n    }\n    if (e.key === \"Backspace\" && !this.state.html) {\n      // If there is no content, we delete the block by pressing \"Backspace\",\n      // just as we would remove a line in a regular text container\n      e.preventDefault();\n      this.props.deleteBlock({\n        id: this.props.id,\n        ref: this.contentEditable.current\n      });\n    }\n    // Store the key to detect combinations like \"Shift-Enter\" later on\n    this.setState({ previousKey: e.key });\n  }\n\n  // The openSelectMenuHandler function needs to be invoked on key up. Otherwise\n  // the calculation of the caret coordinates does not work properly.\n  onKeyUpHandler(e) {\n    if (e.key === CMD_KEY) {\n      this.openSelectMenuHandler();\n    }\n  }\n\n  // After openening the select menu, we attach a click listener to the dom that\n  // closes the menu after the next click - regardless of outside or inside menu.\n  openSelectMenuHandler() {\n    const { x, y } = getCaretCoordinates();\n    this.setState({\n      selectMenuIsOpen: true,\n      selectMenuPosition: { x, y }\n    });\n    document.addEventListener(\"click\", this.closeSelectMenuHandler);\n  }\n\n  closeSelectMenuHandler() {\n    this.setState({\n      htmlBackup: null,\n      selectMenuIsOpen: false,\n      selectMenuPosition: { x: null, y: null }\n    });\n    document.removeEventListener(\"click\", this.closeSelectMenuHandler);\n  }\n\n  // Restore the clean html (without the command), focus the editable\n  // with the caret being set to the end, close the select menu\n  tagSelectionHandler(tag) {\n    this.setState({ tag: tag, html: this.state.htmlBackup }, () => {\n      setCaretToEnd(this.contentEditable.current);\n      this.closeSelectMenuHandler();\n    });\n  }\n\n  render() {\n    return (\n      <>\n        {this.state.selectMenuIsOpen && (\n          <SelectMenu\n            position={this.state.selectMenuPosition}\n            onSelect={this.tagSelectionHandler}\n            close={this.closeSelectMenuHandler}\n          />\n        )}\n        <ContentEditable\n          className=\"Block\"\n          innerRef={this.contentEditable}\n          html={this.state.html}\n          tagName={this.state.tag}\n          onChange={this.onChangeHandler}\n          onKeyDown={this.onKeyDownHandler}\n          onKeyUp={this.onKeyUpHandler}\n        />\n      </>\n    );\n  }\n}\n\nexport default EditableBlock;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}